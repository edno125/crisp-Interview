// For devices more or equal $breakpoint 
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}
  
// For devices less or equal $breakpoint 
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}

// Find out max breakpoint
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $max: map-get($breakpoints, $name);
    @return if($max and $max > 0, $max - .02, null); // if(true,this,else this)
}

// Find out min breakpoint
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null); // if(true,this,else this)
}


//@include toRem(width, 400);
@mixin toRem($property, $value) {
    #{$property}: ($value / 16) + rem;
}
@mixin toEm($property, $value) {
    #{$property}: ($value / 16) + em;
}

//Build container
@mixin make-container($gutter: $container-padding-x) {
    width: 100%;
    padding-right: $gutter;
    padding-left: $gutter;
    margin-right: auto;
    margin-left: auto;
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}


//Convert to rem
//@include toRem(width, 400);
@mixin toRem($property, $value) {
    #{$property}: ($value / 16) + rem;
}